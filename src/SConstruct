import subprocess

Help("""
Builder for my Acorn Atom Emulation
""")

USE_XML = True

def add_library(env, lib):
    env.AppendUnique( CPPPATH = subprocess.check_output(['pkg-config', '--cflags', lib]).split()
                    , LIBS    = subprocess.check_output(['pkg-config', '--libs', lib]).split()
                    )

common_env = Environment()
common_env['CCFLAGS']   = r'-Wall -g -pipe -std=c++11 -pthread -O0'
common_env['CPPPATH']   = [r'.']
common_env['LINKFLAGS'] = r'-pthread'

add_library(common_env, 'liblog4cxx')

common_env['BUILDERS']['rng2rnc'] = Builder(action='trang -I rng -O rnc $SOURCE $TARGET', suffix='rnc')
common_env.rng2rnc('relaxng.rnc', 'relaxng.rng')
common_env.rng2rnc('atom.rnc', 'atom.rng')
common_env.rng2rnc('emulator.rnc', 'emulator.rng')

common_env['BUILDERS']['rng2xsd'] = Builder(action='trang -I rng -O xsd $SOURCE $TARGET', suffix='xsd')
common_env.rng2xsd('relaxng.xsd', 'relaxng.rng')
common_env.rng2xsd('atom.xsd', 'atom.rng')
common_env.rng2xsd('emulator.xsd', 'emulator.rng')

libatom_env = common_env.Clone()
atomlib = libatom_env.StaticLibrary(r'atom', [ r'memory.cpp'
                                             , r'ppia.cpp'
                                             , r'cpu.cpp'
                                             , r'atom.cpp'
                                             ])

atom_gui_sdl_env = common_env.Clone()
add_library(atom_gui_sdl_env, 'sdl')

if USE_XML:
    add_library(atom_gui_sdl_env, 'libxml++-2.6')

atom_gui_sdl_env.Program('atom', [ r'screen_graphics_controller.cpp'
                                 , r'screen_graphics_view.cpp'
                                 , r'keyboard_controller.cpp'
                                 , (r'config_xml.cpp' if USE_XML else r'config_fixed.cpp')
                                 , r'main.cpp'
                                 , atomlib
                                 ])
